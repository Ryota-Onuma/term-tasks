// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tasks.sql

package queries

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
;

INSERT INTO tasks (
  title,
  detail,
  status,
  priority,
  dead_line_at
) VALUES (
  ?,
  ?,
  ?,
  ?,
  ?
) RETURNING id, title, detail, status, priority, created_at, updated_at, dead_line_at
`

type CreateTaskParams struct {
	Title      string
	Detail     string
	Status     string
	Priority   string
	DeadLineAt sql.NullString
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Detail,
		arg.Status,
		arg.Priority,
		arg.DeadLineAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Detail,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeadLineAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT tasks.id, tasks.title, tasks.detail, tasks.status, tasks.priority, tasks.created_at, tasks.updated_at, tasks.dead_line_at, tags.name AS tag_name FROM tasks
JOIN master_task_states ON tasks.status = master_task_states.value
JOIN master_task_priorities ON tasks.priority = master_task_priorities.value
LEFT OUTER JOIN task_tags ON tasks.id = task_tags.task_id
JOIN tags ON task_tags.tag_id = tags.id
WHERE tasks.id = ? LIMIT 1
`

type GetTaskRow struct {
	ID         int64
	Title      string
	Detail     string
	Status     string
	Priority   string
	CreatedAt  string
	UpdatedAt  string
	DeadLineAt sql.NullString
	TagName    string
}

func (q *Queries) GetTask(ctx context.Context, id int64) (GetTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i GetTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Detail,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeadLineAt,
		&i.TagName,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT 
  tasks.id, tasks.title, tasks.detail, tasks.status, tasks.priority, tasks.created_at, tasks.updated_at, tasks.dead_line_at, 
  master_task_states.label AS task_state_label, 
  master_task_priorities.label AS task_priority_label
FROM tasks
INNER JOIN master_task_states ON tasks.status = master_task_states.value
INNER JOIN master_task_priorities ON tasks.priority = master_task_priorities.value
ORDER BY master_task_priorities.display_order ASC, tasks.created_at DESC
`

type ListTasksRow struct {
	ID                int64
	Title             string
	Detail            string
	Status            string
	Priority          string
	CreatedAt         string
	UpdatedAt         string
	DeadLineAt        sql.NullString
	TaskStateLabel    string
	TaskPriorityLabel string
}

func (q *Queries) ListTasks(ctx context.Context) ([]ListTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTasksRow
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Detail,
			&i.Status,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeadLineAt,
			&i.TaskStateLabel,
			&i.TaskPriorityLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = ?,
    detail = ?,
    status = ?,
    priority = ?,
    dead_line_at = ?
WHERE id = ?
RETURNING id, title, detail, status, priority, created_at, updated_at, dead_line_at
`

type UpdateTaskParams struct {
	Title      string
	Detail     string
	Status     string
	Priority   string
	DeadLineAt sql.NullString
	ID         int64
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Detail,
		arg.Status,
		arg.Priority,
		arg.DeadLineAt,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Detail,
		&i.Status,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeadLineAt,
	)
	return i, err
}
